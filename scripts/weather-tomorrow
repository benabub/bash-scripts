#!/usr/bin/env python3

import os
import requests
import sys
import json
from datetime import datetime, timedelta
from time import sleep
from pathlib import Path

CACHE_FILE = Path.home() / ".cache" / "weather_tomorrow_cache.json"


def get_tomorrow_weather():
    try:
        api_key = os.environ.get('OWM_API_KEY')
        city = os.environ.get('OWM_CITY')

        if not api_key or not city:
            raise ValueError("API credentials not configured")

        tomorrow_date = (datetime.now() + timedelta(days=1)
                         ).strftime('%Y-%m-%d')
        url = (
            "http://api.openweathermap.org/data/2.5/"
            f"forecast?q={city}&appid={api_key}&units=metric"
        )

        retries = 3
        timeout = 30

        for attempt in range(retries):
            try:
                response = requests.get(url, timeout=timeout)
                response.raise_for_status()

                forecasts = response.json()['list']
                temp = None

                # Try to get noon forecast first
                for forecast in forecasts:
                    if (forecast['dt_txt'].startswith(tomorrow_date) and
                            '12:00:00' in forecast['dt_txt']):
                        temp = round(forecast['main']['temp'])
                        break

                if temp is None:
                    raise ValueError("No forecast data available")

                weather_data = f"{temp:+d}"

                cache_data = {
                    'weather': weather_data,
                    'timestamp': datetime.now().timestamp(),
                    'for_date': tomorrow_date
                }
                CACHE_FILE.parent.mkdir(parents=True, exist_ok=True)
                with open(CACHE_FILE, 'w') as f:
                    json.dump(cache_data, f)

                return weather_data

            except requests.exceptions.Timeout:
                if attempt < retries - 1:
                    sleep(5)
                    continue
                raise

    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        try:
            if CACHE_FILE.exists():
                with open(CACHE_FILE) as f:
                    cache_data = json.load(f)

                cache_time = datetime.fromtimestamp(cache_data['timestamp'])
                current_tomorrow_date = (
                    datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')

                if (datetime.now() - cache_time < timedelta(hours=6) and
                        cache_data.get('for_date') == current_tomorrow_date):
                    return cache_data['weather']
        except Exception as cache_error:
            print(f"Cache read error: {cache_error}", file=sys.stderr)

        return "E"


if __name__ == "__main__":
    print(get_tomorrow_weather())
