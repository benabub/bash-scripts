#!/bin/bash

# rename dir-tree (regular files & directories): lowercase + whitespaces -> '-'
# ignoring files and dirs, which begin with `.` | `~`
# matches existing paths and rename it with new indices
# as options: exclude || add dirs to rename

#######################
# vars
#######################

option=0
manual_files=0
manual_dirs=0
manual_total=0
manual_current=0
dryrun=0
sep="_"
anti_sep="-"

#######################
# functions
#######################

show_help() {
    cat <<EOF

USAGE:
    $(basename "$0") [--dryrun | -n] [OPTION] [DIRS...]

OPTIONS:
    --dryrun, -n
        Perform a dry run without making actual changes.
        This option must be specified first if used.

    [no more options]
        Rename the entire directory tree under the current working directory (cwd).

    --only, -o
        Rename all directory trees in the selected folders, including their names.

    --exclude, -e
        Rename the entire directory tree under the current working directory (cwd),
        excluding the selected folders and their contents.

    --files, -f
        Rename the entire directory tree under the current working directory (cwd),
        with manual renaming required for each non-ASCII filename.

    --onlyfiles, -of, -fo
        Rename all directory trees in the selected folders (including their names),
        with manual renaming required for each regular file containing non-ASCII characters.

    --excludefiles, -ef, -fe
        Rename the entire directory tree under the current working directory (cwd),
        excluding selected folders and their contents, with manual renaming required
        for each regular file containing non-ASCII characters.

    --dirs, -d
        Rename the entire directory tree under the current working directory (cwd),
        with manual renaming required for each directory containing non-ASCII characters
        in its name.

    --onlydirs, -od, -do
        Rename the entire directory tree under the current working directory (cwd),
        excluding selected folders and their contents, with manual renaming required
        for each directory containing non-ASCII characters in its name.

    --excludedirs, -ed, -de
        Rename the entire directory tree under the current working directory (cwd),
        excluding selected folders and their contents, with manual renaming required
        for each directory containing non-ASCII characters in its name.

    --both, -b
        Manually rename both files and directories with non-ASCII characters in their names.

    --onlyboth, -ob, -bo
        Rename all directory trees in the selected folders (including their names),
        with manual renaming required for each directory and file containing non-ASCII
        characters in their names.

    --excludeboth, -eb, -be
        Rename the entire directory tree under the current working directory (cwd),
        excluding selected folders and their contents, with manual renaming required
        for each directory and file containing non-ASCII characters in their names.

    --help, -h
        Show this help message.

EOF
}

# takes 1 arg: question string
ask_confirm() {
	read -rp "$1" answer
	if [[ "$answer" =~ ^(y|yes|Y|YES)$ ]]; then
		return 0
	else
		echo "----------------- cancelled -----------------"
		return 1
	fi
}

# ask for separator: `_` (1) or `-` (2), Empty - default
ask_sep() {
	echo "Please, choose the separator, default: {_}:"
	echo "(1): {_} ('Bla Bla' -> 'bla_bla')"
	echo "(2): {-} ('Bla Bla' -> 'bla-bla')"
	read -rp "Enter your choice (1|2|<Enter>): " answer
	if [[ "$answer" =~ ^[1-2]$ || -z "$answer" ]]; then
		if [ "$answer" = 2 ]; then
			sep="-"
			anti_sep="_"
		fi
	else
		echo "Unknown separator: $answer"
		return 1
	fi
}

check_no_args() {
	if [ -n "$1" ]; then
		echo "This command does not take any arguments in this mode."
		return 1
	fi
	return 0
}

# check if any arg starts with hyphen
check_no_more_opts() {
	for i in "$@"; do
		if [[ "$i" = -n ]] || [[ "$i" = --dryrun ]]; then
			echo "Please, use the --dryrun or -n option only at the beginning of the command."
			return 1
		fi
		if [[ "$i" = -* ]]; then
			echo "This command does not support additional options in this mode."
			return 1
		fi
	done
	return 0
}

check_arg_presented() {
	if [ -z "$1" ]; then
		echo "This command requires one or more arguments in this mode."
		return 1
	fi
	return 0
}

check_subdir() {
	for d in "$@"; do
		if [ ! -d "$(pwd)/$d" ]; then
			echo "Arguments must be subdirectories of the current working directory."
			return 1
		fi
	done
	return 0
}

# takes 2 args: object path, object name
check_extension() {
	local path="$1"
	local name="$2"
	local regex='^.+\.[a-zA-Z0-9\-\/]+$'
	if [ -e "$path" ] && [[ "$name" =~ $regex ]]; then
		return 0
	else
		return 1
	fi
}

# takes 1 arg: old_str; echo new_str
rename_str() {
	local name="$1"

	# Remove all prefixes and suffixes of '-', '_', and ' '
	while [[ "$name" =~ ^[-_[:space:]] ]]; do
		name="${name#[-_ ]}"
	done
	while [[ "$name" =~ [-_[:space:]]$ ]]; do
		name="${name%[-_ ]}"
	done

	if [[ "$name" =~ .*[a-z][A-Z].* ]]; then
		# shellcheck disable=SC2001
		name=$(echo "$name" | sed "s/\([a-z]\)\([A-Z]\)/\1'$sep'\2/g")
	fi
	name="${name// /$sep}" # replace spaces with sep
	name="${name,,}" # lowercase
	if [ $sep = "-" ]; then
		name="${name//_/$sep}" # replace underscores with sep
	fi
	if [ $sep = "_" ]; then
		name="${name//-/$sep}" # replace hyphens with sep
	fi
	echo "$name"
}

# overwriting builtin 'rename' command with a better variant
# function to rename a file with checking if new name already exists, else renaiming with index
# handle both arg and stdin
# performs manual renaming of non-ASCII names if necessary
rename() {

	auto_rename() {
		local path="$1"
		local prefix="${path%/*}"
		local name_old="${path##*/}"


		if check_extension "$path" "$name_old"; then
			local base_name="${name_old%.*}"
			local extension="${name_old##*.}"

			base_name_new="$(rename_str "$base_name")"
			path_new="$prefix/$base_name_new.$extension"

			# check if the new name already exists
			if [ -e "$path_new" ]; then
				# if exists, start appending index to find a unique name
				local index=1
				while [ -e "$prefix/${base_name_new}-${index}.${extension}" ]; do
					((index++))
				done

				# rename with the new unique name
				if [ $dryrun -eq 1 ]; then
					echo "-----------------------"
					echo "auto-rename/extension/exist: >$path<"
					echo "mv $path $prefix/${base_name_new}-${index}.${extension}"
				else
					if ! mv "$path" "$prefix/${base_name_new}-${index}.${extension}"; then
						echo "Error renaming $path to $prefix/${base_name_new}-${index}.${extension}" >&2
					fi
				fi

			else

				# if does not exist, rename directly
				if [ $dryrun -eq 1 ]; then
					echo "-----------------------"
					echo "auto-rename/extension: >$path<"
					echo "mv $path $prefix/${base_name_new}.${extension}"
				else
					if ! mv "$path" "$prefix/${base_name_new}.${extension}"; then
						echo "Error renaming $path to $prefix/${base_name_new}.${extension}" >&2
					fi
				fi

			fi

		else

			name_new="$(rename_str "$name_old")"
			path_new="$prefix/$name_new"

			# check if the new name already exists
			if [ -e "$path_new" ]; then
				# if exists, start appending index to find a unique name
				local index=1
				while [ -e "$prefix/${name_new}-${index}" ]; do
					((index++))
				done

				# rename with the new unique name
				if [ $dryrun -eq 1 ]; then
					echo "-----------------------"
					echo "auto-rename/exist: >$path<"
					echo "mv $path $prefix/${name_new}-${index}"
				else
					if ! mv "$path" "$prefix/${name_new}-${index}"; then
						echo "Error renaming $path to $prefix/${name_new}-${index}" >&2
					fi
				fi

			else

				# if does not exist, rename directly
				if [ $dryrun -eq 1 ]; then
					echo "-----------------------"
					echo "auto-rename: >$path<"
					echo "mv $path $prefix/${name_new}"
				else
					if ! mv "$path" "$prefix/${name_new}"; then
						echo "Error renaming $path to $prefix/${name_new}" >&2
					fi
				fi

			fi
		fi
	}

	manual_rename() {
		local path="$1"
		local prefix="${path%/*}"
		local name_old="${path##*/}"
		local obj=""
		# save the path type as a str
		if [ -d "$path" ]; then
			obj="[DIR]"
		else
			obj="[file]"
		fi

		if [ "$manual_total" -ne 0 ]; then
			percentage=$(( (manual_current * 100) / manual_total ))
			echo "--------- Manual Renaming: $percentage% -------------"
		fi
		((manual_current++))

		if check_extension "$path" "$name_old"; then
			local base_name="${name_old%.*}"
			local extension="${name_old##*.}"

			read -rp "$obj $base_name: " base_name_new </dev/tty

			path_new="$prefix/$base_name_new.$extension"

			# check if the new name already exists
			if [ -e "$path_new" ]; then
				# if exists, start appending index to find a unique name
				local index=1
				while [ -e "$prefix/${base_name_new}-${index}.${extension}" ]; do
					((index++))
				done

				# rename with the new unique name
				if [ $dryrun -eq 1 ]; then
					echo "manual-rename/extension/exist: >$path<"
					echo "mv $path $prefix/${base_name_new}-${index}.${extension}"
				else
					if ! mv "$path" "$prefix/${base_name_new}-${index}.${extension}"; then
						echo "Error renaming $path to $prefix/${base_name_new}-${index}.${extension}" >&2
					fi
				fi

			else

				# if does not exist, rename directly
				if [ $dryrun -eq 1 ]; then
					echo "manual-rename/extension: >$path<"
					echo "mv $path $prefix/${base_name_new}.${extension}"
				else
					if ! mv "$path" "$prefix/${base_name_new}.${extension}"; then
						echo "Error renaming $path to $prefix/${base_name_new}.${extension}" >&2
					fi
				fi

			fi

		else

			read -rp "$obj $name_old: " name_new </dev/tty

			path_new="$prefix/$name_new"

			# check if the new name already exists
			if [ -e "$path_new" ]; then
				# if exists, start appending index to find a unique name
				local index=1
				while [ -e "$prefix/${name_new}-${index}" ]; do
					((index++))
				done

				# rename with the new unique name
				if [ $dryrun -eq 1 ]; then
					echo "manual-rename/exist: >$path<"
					echo "mv $path $prefix/${name_new}-${index}"
				else
					if ! mv "$path" "$prefix/${name_new}-${index}"; then
						echo "Error renaming $path to $prefix/${name_new}-${index}" >&2
					fi
				fi

			else

				# if does not exist, rename directly
				if [ $dryrun -eq 1 ]; then
					echo "manual-rename: >$path<"
					echo "mv $path $prefix/${name_new}"
				else
					if ! mv "$path" "$prefix/${name_new}"; then
						echo "Error renaming $path to $prefix/${name_new}" >&2
					fi
				fi

			fi
		fi
	}

	# Function to process a single file path
	single_path() {
		local path="$1"
		# adding prefix `./` to path when its absent
		if ! [[ "$path" =~ ^\.\/.* ]]; then
			path="./$path"
		fi
		local name="${path##*/}"

		# choosing the way of renaming: manual / auto
		if { [ $manual_files -eq 1 ] && [ -f "$path" ] && [[ "$name" =~ [^a-zA-Z0-9[:punct:][:space:]] ]]; } || \
			{ [ $manual_dirs -eq 1 ] && [ -d "$path" ] && [[ "$name" =~ [^a-zA-Z0-9[:punct:][:space:]] ]]; }; then

			manual_rename "$path"
		else

			auto_rename "$path"

		fi
	}

	# Check if there are arguments; if yes, iterate over them
	if [ "$#" -gt 0 ]; then
		for path in "$@"; do
			single_path "$path"
		done
	else
		# If no arguments, read from stdin
		while IFS= read -r path; do
			single_path "$path"
		done
	fi
}

# sort strings by the number of '/' symbols (replacement for -depth in find command to use in pipeline)
sort_by_slashes() {
	# Read from stdin
	while IFS= read -r line; do
		# Count '/' symbols and print count and line
		count=$(grep -o "/" <<< "$line" | wc -l)
		echo "$count $line"
	done | sort -nr | awk '{$1=""; print substr($0, 2)}'
}

# filter paths in pipelines by RE conditions in basename
filter_paths_manual_all() {
	while IFS= read -r path; do
		local name=""
		name=$(basename "$path")
		if echo "$name" | grep -qP "[[:space:]]|[[:upper:]]|[^\x00-\x7F]|$anti_sep"; then
			echo "$path"
		fi
	done
}

# filter paths in pipelines by RE conditions in basename
filter_paths_manual_only() {
	while IFS= read -r path; do
		local name=""
		name=$(basename "$path")
		if echo "$name" | grep -qP "[^\x00-\x7F]"; then
			echo "$path"
		fi
	done
}

rename_tree() {

	# rename all regular files in a tree
	rename_files_auto() {
		find . \
-type d \( -name '.*' ! -name '.' -o -name '~*' \) -prune \
-o -type f ! \( -name '.*' -o -name '~*' \) \
-a \( -name '* *' -o -name '*[[:upper:]]*' -o -name "*$anti_sep*" \) \
-print0 | xargs -0 -I {} printf '%s\n' '{}' | rename
	}

	# rename all subdirs from depth to cwd
	rename_dirs_auto() {
		find . \
-type d \( -name '.*' ! -name '.' -o -name '~*' \) -prune \
-o -type d \( -name '* *' -o -name '*[[:upper:]]*' -o -name "*$anti_sep*" \) \
-print0 | xargs -0 -I {} printf '%s\n' '{}' | sort_by_slashes | rename
	}

	rename_files_manual() {
		local temp_file
		temp_file=$(mktemp)
		# remove temp file on exit:
		trap 'rm -f "$temp_file"' EXIT

		find . \
-type d \( -name '.*' ! -name '.' -o -name '~*' \) -prune \
-o -type f ! \( -name '.*' -o -name '~*' \) \
-print0 | xargs -0 -I {} printf '%s\n' '{}' | \
filter_paths_manual_all >> "$temp_file"

		while IFS= read -r line; do
			rename "$line"
		done < "$temp_file"
	}

	rename_dirs_manual() {
		local temp_file
		temp_file=$(mktemp)
		# remove temp file on exit:
		trap 'rm -f "$temp_file"' EXIT

		find . \
-type d \( -name '.*' ! -name '.' -o -name '~*' \) -prune \
-o -type d \
-print0 | xargs -0 -I {} printf '%s\n' '{}' | \
filter_paths_manual_all | sort_by_slashes >> "$temp_file"

		while IFS= read -r line; do
			rename "$line"
		done < "$temp_file"
	}

	count_files_manual() {
		find . \
-type d \( -name '.*' ! -name '.' -o -name '~*' \) -prune \
-o -type f ! \( -name '.*' -o -name '~*' \) \
-print0 | xargs -0 -I {} printf '%s\n' '{}' | \
filter_paths_manual_only | wc -l
	}

	count_dirs_manual() {
	find . \
-type d \( -name '.*' ! -name '.' -o -name '~*' \) -prune \
-o -type d \
-print0 | xargs -0 -I {} printf '%s\n' '{}' | \
filter_paths_manual_only | wc -l
	}

	# no manual
	if [ $manual_files -eq 0 ] && [ $manual_dirs -eq 0 ]; then
		rename_files_auto
		rename_dirs_auto
		return
	fi

	# manual renaming dirs
	if [ $manual_dirs -eq 1 ] && [ $manual_files -eq 0 ]; then
		manual_total=$(count_dirs_manual)
		rename_files_auto
		rename_dirs_manual
		return
	fi

	# manual renaming files
	if [ $manual_files -eq 1 ] && [ $manual_dirs -eq 0 ]; then
		manual_total=$(count_files_manual)
		rename_files_manual
		rename_dirs_auto
		return
	fi

	# manual renaming both (files + dirs)
	if [ $manual_files -eq 1 ] && [ $manual_dirs -eq 1 ]; then
		manual_total=$(( $(count_files_manual) + $(count_dirs_manual) ))
		rename_files_manual
		rename_dirs_manual
	fi
}

only() {

	check_dir_name() {
		local dir="$1"
		local name="${dir##*/}"
		if [[ "$name" =~ [A-Z[:space:]_-] ]]; then
			return 0
		fi
		if [ $manual_dirs -eq 1 ] && [[ "$name" =~ [^a-zA-Z0-9] ]]; then
			return 0
		fi
		return 1
	}

	local cwd=""
	cwd=$(pwd)
	for dir in "$@"; do
		# cutting off ending `/` if presented
		[[ "$dir" =~ .*\/$ ]] && dir="${dir%/}"

		if cd "$dir"; then
			rename_tree
			cd "$cwd" || { echo "Failed to change directory to '$cwd'"; exit 1; }
			if check_dir_name "$dir"; then
				rename "$dir" || echo "Failed to rename '$dir'"
			fi
		else
			echo "Failed to change directory to '$dir'"
		fi
	done
}

exclude() {
	local exclude_dirs=""
	for pattern in "$@"; do
		# cutting off ending `/` if presented
		if [[ "$pattern" == */ ]]; then
			pattern="${pattern%/}"
		fi
		# adding prefix ./ to path when its absent
		if ! [[ "$pattern" =~ ^\.\/.* ]]; then
			pattern="./$pattern"
		fi
		exclude_dirs+="-o -path '$pattern' "
	done

	rename_files_auto() {
		local str_files
		str_files="find . \
-type d \( -name '.*' ! -name '.' -o -name '~*' $exclude_dirs\) -prune \
-o -type f ! \( -name '.*' -o -name '~*' \) \
-a \( -name '* *' -o -name '*[[:upper:]]*' -o -name '*$anti_sep*' \) \
-print0 | xargs -0 -I {} printf '%s\n' '{}'"
		eval "$str_files" | rename
	}

	rename_dirs_auto() {
		local str_dirs
		str_dirs="find . \
-type d \( -name '.*' ! -name '.' -o -name '~*' $exclude_dirs\) -prune \
-o -type d \( -name '* *' -o -name '*[[:upper:]]*' -o -name '*$anti_sep*' \) \
-print0 | xargs -0 -I {} printf '%s\n' '{}'"
		eval "$str_dirs" | sort_by_slashes | rename
	}

	rename_files_manual() {
		local temp_file
		temp_file=$(mktemp)
		# remove temp file on exit:
		trap 'rm -f "$temp_file"' EXIT

		local str_files
		str_files="find . \
-type d \( -name '.*' ! -name '.' -o -name '~*' $exclude_dirs\) -prune \
-o -type f ! \( -name '.*' -o -name '~*' \) \
-print0 | xargs -0 -I {} printf '%s\n' '{}'"
		eval "$str_files" | filter_paths_manual_all  >> "$temp_file"

		while IFS= read -r line; do
			rename "$line"
		done < "$temp_file"
	}

	rename_dirs_manual() {
		local temp_file
		temp_file=$(mktemp)
		# remove temp file on exit:
		trap 'rm -f "$temp_file"' EXIT

		local str_dirs
		str_dirs="find . \
-type d \( -name '.*' ! -name '.' -o -name '~*' $exclude_dirs\) -prune \
-o -type d \
-print0 | xargs -0 -I {} printf '%s\n' '{}'"
		eval "$str_dirs" | filter_paths_manual_all | sort_by_slashes >> "$temp_file"

		while IFS= read -r line; do
			rename "$line"
		done < "$temp_file"
	}

	count_files_manual() {
		local str_files
		str_files="find . \
-type d \( -name '.*' ! -name '.' -o -name '~*' $exclude_dirs \) -prune \
-o -type f ! \( -name '.*' -o -name '~*' \) \
-a \( -name '*[! -~]*' \) \
-print"
		eval "$str_files" | filter_paths_manual_only | wc -l
	}

	count_dirs_manual() {
		local str_dirs
		str_dirs="find . \
-type d \( -name '.*' ! -name '.' -o -name '~*' $exclude_dirs \) -prune \
-o -type d \( -name '*[! -~]*' \) \
-print"
		eval "$str_dirs" | filter_paths_manual_only | wc -l
	}

	# no manual
	if [ $manual_files -eq 0 ] && [ $manual_dirs -eq 0 ]; then
		rename_files_auto
		rename_dirs_auto
		return
	fi

	# manual renaming dirs
	if [ $manual_dirs -eq 1 ] && [ $manual_files -eq 0 ]; then
		manual_total=$(count_dirs_manual)
		rename_files_auto
		rename_dirs_manual
		return
	fi

	# manual renaming files
	if [ $manual_files -eq 1 ] && [ $manual_dirs -eq 0 ]; then
		manual_total=$(count_files_manual)
		rename_files_manual
		rename_dirs_auto
		return
	fi

	# manual renaming both (files + dirs)
	if [ $manual_files -eq 1 ] && [ $manual_dirs -eq 1 ]; then
		manual_total=$(( $(count_files_manual) + $(count_dirs_manual) ))
		rename_files_manual
		rename_dirs_manual
	fi

}

#######################
# parsing the command
#######################

case "$1" in
--dryrun | -n)
	dryrun=1
	shift
	;;
esac

case "$1" in
--exclude | -e)
	option=1
	shift
	;;
--only | -o)
	option=2
	shift
	;;
--files | -f)
	option=3
	manual_files=1
	shift
	;;
--excludefiles | -ef | -fe)
	option=31
	manual_files=1
	shift
	;;
--onlyfiles | -of | -fo)
	option=32
	manual_files=1
	shift
	;;
--dirs | -d)
	option=4
	manual_dirs=1
	shift
	;;
--excludedirs | -ed | -de)
	option=41
	manual_dirs=1
	shift
	;;
--onlydirs | -od | -do)
	option=42
	manual_dirs=1
	shift
	;;
--both | -b)
	option=5
	manual_files=1
	manual_dirs=1
	shift
	;;
--excludeboth | -eb | -be)
	option=51
	manual_files=1
	manual_dirs=1
	shift
	;;
--onlyboth | -ob | -bo)
	option=52
	manual_files=1
	manual_dirs=1
	shift
	;;
--help | -h)
	option=6
	shift
	;;
--* | -*)
	echo "Unknown option: $1"
	exit 1
	;;
esac

#######################
# logic
#######################

# no args
if [ $option -eq 0 ]; then
	check_no_more_opts "$@" || exit 1
	check_no_args "$@" || exit 1
	ask_confirm "Are you sure you want to rename the entire directory tree under '$(pwd)'? (y/n): " || exit 1
	ask_sep || exit 1

	rename_tree

	exit 0
fi

# only
if [ $option -eq 2 ]; then
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask_confirm "Are you sure you want to rename all directory trees in the selected folders, including their names? (y/n): " || exit 1
	ask_sep || exit 1

	only "$@"
	
	exit 0
fi

# exclude
if [ $option -eq 1 ]; then
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask_confirm "Are you sure you want to rename the entire directory tree under '$(pwd)', excluding the selected folders and their contents? (y/n): " || exit 1
	ask_sep || exit 1

	exclude "$@"
	
	exit 0
fi

# files
if [ $option -eq 3 ]; then
	check_no_more_opts "$@" || exit 1
	check_no_args "$@" || exit 1
	ask_confirm "Are you sure you want to rename the entire directory tree under '$(pwd)', with manual renaming required for each non-ASCII filename? (y/n): " || exit 1
	ask_sep || exit 1

	rename_tree
	
	exit 0
fi

# only + files
if [ $option -eq 32 ]; then
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask_confirm "Are you sure you want to rename all directory trees in the selected folders (including their names), with manual renaming required for each regular file containing non-ASCII characters? (y/n): " || exit 1
	ask_sep || exit 1

	only "$@"
	
	exit 0
fi

# exclude + files
if [ $option -eq 31 ]; then
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask_confirm "Are you sure you want to rename the entire directory tree under '$(pwd)' (excluding selected folders and their contents), with manual renaming required for each regular file containing non-ASCII characters? (y/n): " || exit 1
	ask_sep || exit 1

	exclude "$@"
	
	exit 0
fi

# dirs
if [ $option -eq 4 ]; then
	check_no_more_opts "$@" || exit 1
	check_no_args "$@" || exit 1
	ask_confirm "Are you sure you want to rename the entire directory tree under '$(pwd)', with manual renaming required for each directory containing non-ASCII characters in its name? (y/n): " || exit 1
	ask_sep || exit 1

	rename_tree
	
	exit 0
fi

# only + dirs
if [ $option -eq 42 ]; then
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask_confirm "Are you sure you want to rename all directory trees in the selected folders (including their names), with manual renaming required for each directory containing non-ASCII characters in its name? (y/n): " || exit 1
	ask_sep || exit 1

	only "$@"
	
	exit 0
fi

# exclude + dirs
if [ $option -eq 41 ]; then
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask_confirm "Are you sure you want to rename the entire directory tree under '$(pwd)' (excluding selected folders and their contents), with manual renaming required for each directory containing non-ASCII characters in its name? (y/n): " || exit 1
	ask_sep || exit 1

	exclude "$@"
	
	exit 0
fi

# both
if [ $option -eq 5 ]; then
	check_no_more_opts "$@" || exit 1
	check_no_args "$@" || exit 1
	ask_confirm "Are you sure you want to rename the entire directory tree under '$(pwd)', with manual renaming required for each directory and regular file containing non-ASCII characters in their names? (y/n): " || exit 1
	ask_sep || exit 1

	rename_tree
	
	exit 0
fi

# only + both
if [ $option -eq 52 ]; then
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask_confirm "Are you sure you want to rename all directory trees in the selected folders (including their names), with manual renaming required for each directory and file containing non-ASCII characters in their names? (y/n): " || exit 1
	ask_sep || exit 1

	only "$@"
	
	exit 0
fi

# exclude + both
if [ $option -eq 51 ]; then
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask_confirm "Are you sure you want to rename the entire directory tree under '$(pwd)' (excluding selected folders and their contents), with manual renaming required for each directory and file containing non-ASCII characters in their names? (y/n): " || exit 1
	ask_sep || exit 1

	exclude "$@"
	
	exit 0
fi

# help
if [ $option -eq 6 ]; then
	check_no_more_opts "$@" || exit 1
	check_no_args "$@" || exit 1
	show_help

	# TODO: action
fi
