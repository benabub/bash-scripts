#!/bin/bash

# rename dir-tree (regular files & directories): lowercase + whitespaces -> '-'
# ignoring files and dirs, which begin with `.` | `~`
# matches existing paths and rename it with new indices
# as options: exclude || add dirs to rename

#######################
# vars & functions
#######################

option=0

check_no_args() {
	if [ -n "$1" ]; then
		echo "The command in this mode requires no argument"
		exit 1
	fi
}

check_no_more_opts() {
	for i in "$@"; do
		if [[ "$i" = -* ]]; then
			echo "The command can take only one option"
			exit 1
		fi
	done
}

check_arg_presented() {
	if [ -z "$1" ]; then
		echo "The command in this mode requires one or more arguments"
		exit 1
	fi
}

check_subdir() {
	for d in "$@"; do
		if [ ! -d "$(pwd)/$d" ]; then
			echo "An arguments should be subdirectories of current working directory"
			exit 1
		fi
	done
}

# takes 2 args: object path, object name
check_extension() {
	local path="$1"
	local name="$2"
	local regex='^.+\.[a-zA-Z0-9\-\/]+$'

	if [ -e "$path" ] && [[ "$name" =~ $regex ]]; then
		return 0
	else
		return 1
	fi
}

# takes 1 arg: old_str; echo new_str
rename_str() {
	local name="$1"

	if [[ "$name" =~ .*[a-z][A-Z].* ]]; then
		name=$(echo "$name" | sed 's/\([a-z]\)\([A-Z]\)/\1-\2/g')
	fi

	name="${name// /-}" # replace spaces with `-`
	name="${name,,}" # lowercase
	echo "$name"
}

# Overwriting builtin rename command with a better variant
# Function to rename a file with checking if new name already exists, else renaiming with index
rename() {
	# getting stream from pipeline and working with each line
	while IFS= read -r path; do
		local prefix="${path%/*}"
		local name_old="${path##*/}"

		if check_extension "$path" "$name_old"; then
			local base_name="${name_old%.*}"
			local extension="${name_old##*.}"
			base_name_new="$(rename_str "$base_name")"
			path_new="$prefix/$base_name_new.$extension"

			# Check if the new name already exists
			if [ -e "$path_new" ]; then
				# If exists, start appending index to find a unique name
				local index=1
				while [ -e "$prefix/${base_name_new}-${index}.${extension}" ]; do
					((index++))
				done
				# Rename with the new unique name
				mv "$path" "$prefix/${base_name_new}-${index}.${extension}"
			else
				# If does not exist, rename directly
				mv "$path" "$prefix/${base_name_new}.${extension}"
			fi

		else
			name_new="$(rename_str "$name_old")"
			path_new="$prefix/$name_new"

			# Check if the new name already exists
			if [ -e "$path_new" ]; then
				# If exists, start appending index to find a unique name
				local index=1
				while [ -e "$prefix/${name_new}-${index}" ]; do
					((index++))
				done
				# Rename with the new unique name
				mv "$path" "$prefix/${name_new}-${index}"
			else
				# If does not exist, rename directly
				mv "$path" "$prefix/${name_new}"
			fi
		fi

	done

}

rename_tree() {
	# rename all subdirs in right order (from depth to cwd)
	# either it will cause "dir not exist" errors

	find . -depth -type d -wholename "./*" \( ! -iname ".*" -a ! -iname "~*" -a -name "* *" -o -name "[*A-Z*]" \) -print0 |
		xargs -0 -I {} echo {} | rename

	# rename all regular files in a tree

	find . ! -name "." -type d \( -iname '.*' -o -iname '~*' \) -prune -o\
		-type f \( ! -iname ".*" -a ! -iname "~*" -a -name "* *" -o -name "[*A-Z*]" \) -print0 |
		xargs -0 -I {} echo {} | rename
}

#######################
# parsing the command
#######################

case "$1" in
--exclude | -e)
	option=1
	;;
--only | -o)
	option=2
	;;
--files | -f)
	option=3
	;;
--excludefiles | -ef | -fe)
	option=31
	;;
--onlyfiles | -of | -fo)
	option=32
	;;
--dirs | -d)
	option=4
	;;
--excludedirs | -ed | -de)
	option=41
	;;
--onlydirs | -od | -do)
	option=42
	;;
--both | -b)
	option=5
	;;
--excludeboth | -eb | -be)
	option=51
	;;
--onlyboth | -ob | -bo)
	option=52
	;;
--help | -h)
	option=6
	;;
--* | -*)
	echo "Unknown option: $1"
	exit 1
	;;
esac

#######################
# logic
#######################

# no args
if [ $option -eq 0 ]; then

	check_no_more_opts "$@"
	check_no_args "$@"
	read -rp "Are You shure to rename the whole directory tree under '$(pwd)' (y/n?): " answer

	if [ "$answer" == "y" ] || [ "$answer" == "yes" ] || [ "$answer" == "Y" ] || [ "$answer" == "YES" ]; then
		rename_tree
		exit 0
	else
		echo "------------------------- cancelled -------------------------"
		exit 1
	fi
fi

# exclude
if [ $option -eq 1 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_arg_presented "$@"
	check_subdir "$@"

	# TODO: action

	exit 0
fi

# only
if [ $option -eq 2 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_arg_presented "$@"
	check_subdir "$@"

	# TODO: action

	exit 0
fi

# files
if [ $option -eq 3 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_no_args "$@"

	# TODO: action

	exit 0
fi

# exclude + files
if [ $option -eq 31 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_arg_presented "$@"
	check_subdir "$@"

	# TODO: action

	exit 0
fi

# exclude + only
if [ $option -eq 32 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_arg_presented "$@"
	check_subdir "$@"

	# TODO: action

	exit 0
fi

# dirs
if [ $option -eq 4 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_no_args "$@"

	# TODO: action

	exit 0
fi

# exclude + dirs
if [ $option -eq 41 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_arg_presented "$@"
	check_subdir "$@"

	# TODO: action

	exit 0
fi

# only + dirs
if [ $option -eq 42 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_arg_presented "$@"
	check_subdir "$@"

	# TODO: action

	exit 0
fi

# both
if [ $option -eq 5 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_no_args "$@"

	# TODO: action

	exit 0
fi

# exclude + both
if [ $option -eq 51 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_arg_presented "$@"
	check_subdir "$@"

	# TODO: action

	exit 0
fi

# only + both
if [ $option -eq 52 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_arg_presented "$@"
	check_subdir "$@"

	# TODO: action

	exit 0
fi

# help
if [ $option -eq 6 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_no_args "$@"

	# TODO: action
fi
