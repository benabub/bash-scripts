#!/bin/bash

# rename dir-tree (regular files & directories): lowercase + whitespaces -> '-'
# ignoring files and dirs, which begin with `.` | `~`
# matches existing paths and rename it with new indices
# as options: exclude || add dirs to rename

#######################
# vars & functions
#######################

option=0
manual_files=0
manual_dirs=0

# takes 1 arg: question string
ask() {
	read -rp "$1" answer

	if ! [ "$answer" == "y" ] || [ "$answer" == "yes" ] || [ "$answer" == "Y" ] || [ "$answer" == "YES" ]; then
		echo "------------------------- cancelled -------------------------"
		return 1
	fi
	return 0
}

check_no_args() {
	if [ -n "$1" ]; then
		echo "The command in this mode requires no argument"
		return 1
	fi
	return 0
}

check_no_more_opts() {
	for i in "$@"; do
		if [[ "$i" = -* ]]; then
			echo "The command can take only one option"
			return 1
		fi
	done
	return 0
}

check_arg_presented() {
	if [ -z "$1" ]; then
		echo "The command in this mode requires one or more arguments"
		return 1
	fi
	return 0
}

check_subdir() {
	for d in "$@"; do
		if [ ! -d "$(pwd)/$d" ]; then
			echo "An arguments should be subdirectories of current working directory"
			return 1
		fi
	done
	return 0
}

# takes 2 args: object path, object name
check_extension() {
	local path="$1"
	local name="$2"
	local regex='^.+\.[a-zA-Z0-9\-\/]+$'

	if [ -e "$path" ] && [[ "$name" =~ $regex ]]; then
		return 0
	else
		return 1
	fi
}

# takes 1 arg: old_str; echo new_str
rename_str() {
	local name="$1"

	if [[ "$name" =~ .*[a-z][A-Z].* ]]; then
		name=$(echo "$name" | sed 's/\([a-z]\)\([A-Z]\)/\1-\2/g')
	fi

	name="${name// /-}" # replace spaces with `-`
	name="${name,,}" # lowercase
	echo "$name"
}

# overwriting builtin 'rename' command with a better variant
# function to rename a file with checking if new name already exists, else renaiming with index
rename() {
	# Function to process a single file path
	single_path(){
		local path="$1"

		# adding prefix ./ to path when its absent
		if ! [[ "$path" =~ ^\.\/.* ]]; then
			path="./$i"
		fi

		local prefix="${path%/*}"
		local name_old="${path##*/}"

		if check_extension "$path" "$name_old"; then
			local base_name="${name_old%.*}"
			local extension="${name_old##*.}"
			base_name_new="$(rename_str "$base_name")"
			path_new="$prefix/$base_name_new.$extension"

			# check if the new name already exists
			if [ -e "$path_new" ]; then
				# if exists, start appending index to find a unique name
				local index=1
				while [ -e "$prefix/${base_name_new}-${index}.${extension}" ]; do
					((index++))
				done
				# rename with the new unique name
				mv "$path" "$prefix/${base_name_new}-${index}.${extension}"
			else
				# if does not exist, rename directly
				mv "$path" "$prefix/${base_name_new}.${extension}"
			fi
		else
			name_new="$(rename_str "$name_old")"
			path_new="$prefix/$name_new"

			# check if the new name already exists
			if [ -e "$path_new" ]; then
				# if exists, start appending index to find a unique name
				local index=1
				while [ -e "$prefix/${name_new}-${index}" ]; do
					((index++))
				done
				# rename with the new unique name
				mv "$path" "$prefix/${name_new}-${index}"
			else
				# if does not exist, rename directly
				mv "$path" "$prefix/${name_new}"
			fi
		fi
	}
	# Check if there are arguments; if yes, iterate over them
	if [ "$#" -gt 0 ]; then
		for path in "$@"; do
			single_path "$path"
		done
	else
		# If no arguments, read from stdin
		while IFS= read -r path; do
			single_path "$path"
		done
	fi
}

# find all subdirs in right order (from depth to cwd)
# either it will cause "dir not exist" errors with mv command further
find_dirs() {
	find "$@" -depth -type d ! \( -iname ".*" -o -iname "~*" \) -a \( -name "* *" -o -name "*[A-Z]*" \) -print0 |
		xargs -0 -I {} echo {}
}

# rename all regular files in a tree
find_files() {
	find "$@" ! -name "." -type d \( -iname '.*' -o -iname '~*' \) -prune -o\
		-type f ! \( -iname ".*" -o -iname "~*" \) -a \( -name "* *" -o -name "*[A-Z]*" \) -print0 |
		xargs -0 -I {} echo {}
}

rename_tree() {
	find_dirs "." | rename
	find_files "." | rename
}

only() {
	local cwd=""
	cwd=$(pwd)

	for dir in "$@"; do
		if cd "$dir"; then
			rename_tree
			cd "$cwd" && rename "$dir" || echo "Failed to rename '$dir'"
		else
			echo "Failed to change directory to '$dir'"
		fi
	done
}

# only() {
# 	local cwd=""
# 	cwd=$(pwd)
# 	for dir in "$@"; do
# 		if cd "$dir"; then
# 			rename_tree
# 		else
# 			echo "Failed to change directory to '$dir'"
# 		fi
# 		# Change back to the original directory
# 		if cd "$cwd"; then
# 			rename "$dir"
# 		else
# 			echo "Failed to rename '$dir'"
# 		fi
# 	done
# }

exclude() {
	pass
}

#######################
# tests area
#######################


#######################
# parsing the command
#######################

# TODO: add separator: var + option
case "$1" in
--exclude | -e)
	option=1
	;;
--only | -o)
	option=2
	;;
--files | -f)
	option=3
	manual_files=1
	;;
--excludefiles | -ef | -fe)
	option=31
	manual_files=1
	;;
--onlyfiles | -of | -fo)
	option=32
	manual_files=1
	;;
--dirs | -d)
	option=4
	manual_dirs=1
	;;
--excludedirs | -ed | -de)
	option=41
	manual_dirs=1
	;;
--onlydirs | -od | -do)
	option=42
	manual_dirs=1
	;;
--both | -b)
	option=5
	manual_files=1
	manual_dirs=1
	;;
--excludeboth | -eb | -be)
	option=51
	manual_files=1
	manual_dirs=1
	;;
--onlyboth | -ob | -bo)
	option=52
	manual_files=1
	manual_dirs=1
	;;
--help | -h)
	option=6
	;;
--* | -*)
	echo "Unknown option: $1"
	exit 1
	;;
esac

#######################
# logic
#######################

# no args
if [ $option -eq 0 ]; then
	check_no_more_opts "$@" || exit 1
	check_no_args "$@" || exit 1
	ask "Are You sure to rename the whole directory tree under '$(pwd)' (y/n?): " || exit 1
	rename_tree
	exit 0
fi

# exclude
if [ $option -eq 1 ]; then
	shift # either "--option" will be $1
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask "Are You sure to rename the whole directory trees of the chosen folders, including its names (y/n?): " || exit 1

	# TODO: action
	
	exit 0
fi

# only
if [ $option -eq 2 ]; then
	shift # either "--option" will be $1
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask "Are You sure to rename the whole directory trees of the chosen folders, including its names (y/n?): " || exit 1

	# TODO: action
	only "$@"
	
	exit 0
fi

# files
if [ $option -eq 3 ]; then
	shift # either "--option" will be $1
	check_no_more_opts "$@" || exit 1
	check_no_args "$@" || exit 1
	ask "Are You sure to rename the whole directory tree under '$(pwd)' with manual renaming of each regular file with non ASKII - name (y/n?): " || exit 1

	# TODO: action
	
	exit 0
fi

# exclude + files
if [ $option -eq 31 ]; then
	shift # either "--option" will be $1
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask "Are You sure to rename the whole directory trees of the chosen folders, including its names, with manual renaming of each regular file with non ASKII - name (y/n?): " || exit 1

	# TODO: action
	
	exit 0
fi

# only + files
if [ $option -eq 32 ]; then
	shift # either "--option" will be $1
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask "Are You sure to rename the whole directory trees of the chosen folders, including its names, with manual renaming of each regular file with non ASKII - name (y/n?): " || exit 1

	# TODO: action
	only "$@"
	
	exit 0
fi

# dirs
if [ $option -eq 4 ]; then
	shift # either "--option" will be $1
	check_no_more_opts "$@" || exit 1
	check_no_args "$@" || exit 1
	ask "Are You sure to rename the whole directory tree under '$(pwd)' with manual renaming of each directory with non ASKII - name (y/n?): " || exit 1

	# TODO: action
	
	exit 0
fi

# exclude + dirs
if [ $option -eq 41 ]; then
	shift # either "--option" will be $1
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask "Are You sure to rename the whole directory trees of the chosen folders, including its names, with manual renaming of each directory with non ASKII - name (y/n?): " || exit 1

	# TODO: action
	
	exit 0
fi

# only + dirs
if [ $option -eq 42 ]; then
	shift # either "--option" will be $1
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask "Are You sure to rename the whole directory trees of the chosen folders, including its names, with manual renaming of each directory with non ASKII - name (y/n?): " || exit 1

	# TODO: action
	only "$@"
	
	exit 0
fi

# both
if [ $option -eq 5 ]; then
	shift # either "--option" will be $1
	check_no_more_opts "$@" || exit 1
	check_no_args "$@" || exit 1
	ask "Are You sure to rename the whole directory tree under '$(pwd)' with manual renaming of each directory and each regular file with non ASKII - names (y/n?): " || exit 1

	# TODO: action
	
	exit 0
fi

# exclude + both
if [ $option -eq 51 ]; then
	shift # either "--option" will be $1
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask "Are You sure to rename the whole directory trees of the chosen folders, including its names, with manual renaming of each directory and each regular file with non ASKII - names (y/n?): " || exit 1

	# TODO: action
	
	exit 0
fi

# only + both
if [ $option -eq 52 ]; then
	shift # either "--option" will be $1
	check_no_more_opts "$@" || exit 1
	check_arg_presented "$@" || exit 1
	check_subdir "$@" || exit 1
	ask "Are You sure to rename the whole directory trees of the chosen folders, including its names, with manual renaming of each directory and each regular file with non ASKII - names (y/n?): " || exit 1

	# TODO: action
	only "$@"
	
	exit 0
fi

# help
if [ $option -eq 6 ]; then
	shift # either "--option" will be $1
	check_no_more_opts "$@" || exit 1
	check_no_args "$@" || exit 1

	# TODO: action
fi
