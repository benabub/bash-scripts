#!/bin/bash

# rename dir-tree (regular files & directories): lowercase + whitespaces -> '-'
# ignoring files and dirs, which begin with `.` | `~`
# as options: exclude || add dirs to rename

#######################
# vars & functions
#######################

option=0

check_no_args()
{
	if [ -n "$1" ]; then
		echo "The command in this mode requires no argument"
		exit 1
	fi
}

check_no_more_opts()
{
	for i in "$@"; do
		if [[ "$i" = -* ]]; then
			echo "The command can take only one option"
			exit 1
		fi
	done
}

check_arg_presented()
{
	if [ -z "$1" ]; then
		echo "The command in this mode requires one or more arguments"
		exit 1
	fi
}

check_subdir()
{
	for d in "$@"; do
		if [ ! -d "$(pwd)/$d" ]; then
			echo "Arguments should be subdirectories of CWD"
			exit 1
		fi
	done
}

# rename pattern (Perl)
RP=" s/([a-z])([A-Z])/$1-$2/g;\
	s/ /-/g; s/_/-/g;\
	y/A-Z/a-z/ "

rename_tree()
{
	# rename all subdirs in right order (from depth to cwd)
	# either it will cause "dir not exist" errors

	find . -depth -wholename "./*" -type d ! -name '.*' ! -name '~*' -print0 |
		xargs -0 -I {} echo {} | rename -d "$RP"

	# rename all regular files in a tree

	find . ! -name "." -type d \( -iname '.*' -o -iname '~*' \) -prune\
		-o -type f \( ! -iname ".*" -a ! -iname "~*" \) -print0 |
		xargs -0 -I {} echo {} | rename -d "$RP"
}

#######################
# parsing the command
#######################

case "$1" in
--exclude | -e )
	option=1
	;;
--only | -o )
	option=2
	;;
--help | -h )
	option=3
	;;
--* | -* )
	echo "Unknown option: $1"
	exit 1
	;;
esac

#######################
# logic
#######################

if [ $option -eq 0 ]; then

	check_no_args "$@"
	read -rp "Are You shure to rename the whole directory tree under '$(pwd)' (y/n?): " answer
	
	if [ "$answer" == "y" ] || [ "$answer" == "yes" ] || [ "$answer" == "Y" ] || [ "$answer" == "YES" ]; then
		echo "go"
		# TODO: action
	else
		echo "------------------------- cancelled -------------------------"
		exit 1
	fi
fi

if [ $option -eq 1 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_arg_presented "$@"
	check_subdir "$@"

	# TODO: action
fi

if [ $option -eq 2 ]; then

	shift # either "--option" will be $1
	check_no_more_opts "$@"
	check_arg_presented "$@"
	check_subdir "$@"
	
	# TODO: action
fi

if [ $option -eq 3 ]; then

	shift # either "--option" will be $1
	check_no_args "$@"
	
	# TODO: action
fi
















